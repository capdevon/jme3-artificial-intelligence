plugins {
    id 'java-library'
}

description = 'jme3-ai-examples'

// select one source-code (JDK) option
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// select one version of the Engine:
ext.jmeVersion = '3.8.1-stable'

tasks.withType(Javadoc).configureEach {
    failOnError = false
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    options.release = 11
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    }
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xbatch'
    //jvmArgs '-Xms256m', '-Xmx256m' // to enlarge the Java heap
    //jvmArgs '-XX:+PrintCompilation'
    //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

repositories {
    mavenCentral()
}

dependencies {
	
    // jMonkeyEngine
    implementation 'org.jmonkeyengine:jme3-core:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-effects:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-terrain:' + jmeVersion
    runtimeOnly    'org.jmonkeyengine:jme3-awt-dialogs:' + jmeVersion
    runtimeOnly    'org.jmonkeyengine:jme3-jogg:' + jmeVersion
    runtimeOnly    'org.jmonkeyengine:jme3-plugins:' + jmeVersion
    
    // Physics Engine
    implementation 'com.github.stephengold:Minie:9.0.1+big4'

    // select one version of LWJGL
    //runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmeVersion  // LWJGL 2.x
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmeVersion // LWJGL 3.x

    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.4.0-alpha6'
        
    // libraries related to the Lemur GUI and Groovy:
    implementation 'com.simsilica:lemur:1.16.0'
    implementation 'com.simsilica:lemur-props:1.2.0'
    implementation 'com.simsilica:lemur-proto:1.13.0'
    runtimeOnly 'org.codehaus.groovy:groovy-jsr223:3.0.16'
    
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.18.0'

    api files("libs/jME3-ai.jar")
    api files("libs/cai-nmgen-0.2.0.jar")
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')

tasks.register('cleanDLLs', Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
